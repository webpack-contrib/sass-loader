// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.message, .success, .error, .warning {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333; }

.success {
  border-color: green; }

.error {
  border-color: red; }

.warning {
  border-color: yellow; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should don't use the "fibers" package when the "fiber" option is "false" ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.message, .success, .error, .warning {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333; }

.success {
  border-color: green; }

.error {
  border-color: red; }

.warning {
  border-color: yellow; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should ignore the "data" option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should ignore the "data" option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "data" option ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "file" option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "file" option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.message, .success, .error, .warning {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333; }

.success {
  border-color: green; }

.error {
  border-color: red; }

.warning {
  border-color: yellow; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should ignore the "file" option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should ignore the "file" option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "file" option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "file" option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "file" option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "url" option ('dart-sass', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "url" option ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "url" option ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "url" option ('dart-sass', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "url" option ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "url" option ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "url" option ('sass-embedded', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "url" option ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "url" option ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should ignore the "url" option ('sass-embedded', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should ignore the "url" option ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should ignore the "url" option ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

nav li {
  display: inline-block;
}

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .success, .error, .warning {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "";
}

.bar:before {
  content: "∑";
}
"
`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

nav li {
  display: inline-block;
}

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "";
}

.bar:before {
  content: "∑";
}
"
`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should respect the "outputStyle"/"style" option ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `"﻿@import"./file.css";body{font:100% Helvetica,sans-serif;color:#333}nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}.box{-webkit-border-radius:10px;-moz-border-radius:10px;-ms-border-radius:10px;border-radius:10px}.message,.warning,.error,.success{border:1px solid #ccc;padding:10px;color:#333}.success{border-color:green}.error{border-color:red}.warning{border-color:#ff0}.foo:before{content:""}.bar:before{content:"∑"}"`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `"﻿@import"./file.css";body{font:100% Helvetica,sans-serif;color:#333}nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}.box{-webkit-border-radius:10px;-moz-border-radius:10px;-ms-border-radius:10px;border-radius:10px}.foo:before{content:""}.bar:before{content:"∑"}"`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'modern' API, 'sass' syntax): css 1`] = `"﻿@import"./file.css";body{font:100% Helvetica,sans-serif;color:#333}nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}.box{-webkit-border-radius:10px;-moz-border-radius:10px;-ms-border-radius:10px;border-radius:10px}.message,.warning,.error,.success{border:1px solid #ccc;padding:10px;color:#333}.success{border-color:green}.error{border-color:red}.warning{border-color:#ff0}.foo:before{content:""}.bar:before{content:"∑"}"`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'modern' API, 'scss' syntax): css 1`] = `"﻿@import"./file.css";body{font:100% Helvetica,sans-serif;color:#333}nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}.box{-webkit-border-radius:10px;-moz-border-radius:10px;-ms-border-radius:10px;border-radius:10px}.foo:before{content:""}.bar:before{content:"∑"}"`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"﻿@import url(./file.css);body{font:100% Helvetica,sans-serif;color:#333}nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}.box{-webkit-border-radius:10px;-moz-border-radius:10px;-ms-border-radius:10px;border-radius:10px}.message,.success,.error,.warning{border:1px solid #ccc;padding:10px;color:#333}.success{border-color:green}.error{border-color:red}.warning{border-color:yellow}.foo:before{content:""}.bar:before{content:"∑"}
"
`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"﻿@import url(./file.css);body{font:100% Helvetica,sans-serif;color:#333}nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}.box{-webkit-border-radius:10px;-moz-border-radius:10px;-ms-border-radius:10px;border-radius:10px}.foo:before{content:""}.bar:before{content:"∑"}
"
`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `"@import"./file.css";body{font:100% Helvetica,sans-serif;color:#333}nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}.box{-webkit-border-radius:10px;-moz-border-radius:10px;-ms-border-radius:10px;border-radius:10px}.message,.warning,.error,.success{border:1px solid #ccc;padding:10px;color:#333}.success{border-color:green}.error{border-color:red}.warning{border-color:#ff0}.foo:before{content:""}.bar:before{content:"∑"}"`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `"@import"./file.css";body{font:100% Helvetica,sans-serif;color:#333}nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}.box{-webkit-border-radius:10px;-moz-border-radius:10px;-ms-border-radius:10px;border-radius:10px}.foo:before{content:""}.bar:before{content:"∑"}"`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'modern' API, 'sass' syntax): css 1`] = `"@import"./file.css";body{font:100% Helvetica,sans-serif;color:#333}nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}.box{-webkit-border-radius:10px;-moz-border-radius:10px;-ms-border-radius:10px;border-radius:10px}.message,.warning,.error,.success{border:1px solid #ccc;padding:10px;color:#333}.success{border-color:green}.error{border-color:red}.warning{border-color:#ff0}.foo:before{content:""}.bar:before{content:"∑"}"`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'modern' API, 'scss' syntax): css 1`] = `"@import"./file.css";body{font:100% Helvetica,sans-serif;color:#333}nav ul{margin:0;padding:0;list-style:none}nav li{display:inline-block}nav a{display:block;padding:6px 12px;text-decoration:none}.box{-webkit-border-radius:10px;-moz-border-radius:10px;-ms-border-radius:10px;border-radius:10px}.foo:before{content:""}.bar:before{content:"∑"}"`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use "compressed" output style in the "production" mode ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should use the "fibers" package if it is possible ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should use the "fibers" package if it is possible ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.message, .success, .error, .warning {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333; }

.success {
  border-color: green; }

.error {
  border-color: red; }

.warning {
  border-color: yellow; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should use the "fibers" package if it is possible ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should use the "fibers" package if it is possible ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should use the "fibers" package if it is possible ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should use the "fibers" package if it is possible ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should use the "fibers" package if it is possible ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.message, .success, .error, .warning {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333; }

.success {
  border-color: green; }

.error {
  border-color: red; }

.warning {
  border-color: yellow; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should work when the option is empty "Object" ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should work when the option is empty "Object" ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option is empty "Object" ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
          font: 100% Helvetica, sans-serif;
          color: #333;
}

nav ul {
          margin: 0;
          padding: 0;
          list-style: none;
}
nav li {
          display: inline-block;
}
nav a {
          display: block;
          padding: 6px 12px;
          text-decoration: none;
}

.box {
          -webkit-border-radius: 10px;
          -moz-border-radius: 10px;
          -ms-border-radius: 10px;
          border-radius: 10px;
}

.message, .warning, .error, .success {
          border: 1px solid #ccc;
          padding: 10px;
          color: #333;
}

.success {
          border-color: green;
}

.error {
          border-color: red;
}

.warning {
          border-color: yellow;
}

.foo:before {
          content: "\\e0c6";
}

.bar:before {
          content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
          font: 100% Helvetica, sans-serif;
          color: #333;
}

nav ul {
          margin: 0;
          padding: 0;
          list-style: none;
}
nav li {
          display: inline-block;
}
nav a {
          display: block;
          padding: 6px 12px;
          text-decoration: none;
}

.box {
          -webkit-border-radius: 10px;
          -moz-border-radius: 10px;
          -ms-border-radius: 10px;
          border-radius: 10px;
}

.foo:before {
          content: "\\e0c6";
}

.bar:before {
          content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
          font: 100% Helvetica, sans-serif;
          color: #333; }

nav ul {
          margin: 0;
          padding: 0;
          list-style: none; }

nav li {
          display: inline-block; }

nav a {
          display: block;
          padding: 6px 12px;
          text-decoration: none; }

.box {
          -webkit-border-radius: 10px;
          -moz-border-radius: 10px;
          -ms-border-radius: 10px;
          border-radius: 10px; }

.message, .success, .error, .warning {
          border: 1px solid #ccc;
          padding: 10px;
          color: #333; }

.success {
          border-color: green; }

.error {
          border-color: red; }

.warning {
          border-color: yellow; }

.foo:before {
          content: ""; }

.bar:before {
          content: "∑"; }
"
`;

exports[`sassOptions option should work when the option like "Function" ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
          font: 100% Helvetica, sans-serif;
          color: #333; }

nav ul {
          margin: 0;
          padding: 0;
          list-style: none; }

nav li {
          display: inline-block; }

nav a {
          display: block;
          padding: 6px 12px;
          text-decoration: none; }

.box {
          -webkit-border-radius: 10px;
          -moz-border-radius: 10px;
          -ms-border-radius: 10px;
          border-radius: 10px; }

.foo:before {
          content: ""; }

.bar:before {
          content: "∑"; }
"
`;

exports[`sassOptions option should work when the option like "Function" ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.message, .success, .error, .warning {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333; }

.success {
  border-color: green; }

.error {
  border-color: red; }

.warning {
  border-color: yellow; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should work when the option like "Function" and never return ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should work when the option like "Function" and never return ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Function" and never return ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
          font: 100% Helvetica, sans-serif;
          color: #333;
}

nav ul {
          margin: 0;
          padding: 0;
          list-style: none;
}
nav li {
          display: inline-block;
}
nav a {
          display: block;
          padding: 6px 12px;
          text-decoration: none;
}

.box {
          -webkit-border-radius: 10px;
          -moz-border-radius: 10px;
          -ms-border-radius: 10px;
          border-radius: 10px;
}

.message, .warning, .error, .success {
          border: 1px solid #ccc;
          padding: 10px;
          color: #333;
}

.success {
          border-color: green;
}

.error {
          border-color: red;
}

.warning {
          border-color: yellow;
}

.foo:before {
          content: "\\e0c6";
}

.bar:before {
          content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
          font: 100% Helvetica, sans-serif;
          color: #333;
}

nav ul {
          margin: 0;
          padding: 0;
          list-style: none;
}
nav li {
          display: inline-block;
}
nav a {
          display: block;
          padding: 6px 12px;
          text-decoration: none;
}

.box {
          -webkit-border-radius: 10px;
          -moz-border-radius: 10px;
          -ms-border-radius: 10px;
          border-radius: 10px;
}

.foo:before {
          content: "\\e0c6";
}

.bar:before {
          content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
          font: 100% Helvetica, sans-serif;
          color: #333; }

nav ul {
          margin: 0;
          padding: 0;
          list-style: none; }

nav li {
          display: inline-block; }

nav a {
          display: block;
          padding: 6px 12px;
          text-decoration: none; }

.box {
          -webkit-border-radius: 10px;
          -moz-border-radius: 10px;
          -ms-border-radius: 10px;
          border-radius: 10px; }

.message, .success, .error, .warning {
          border: 1px solid #ccc;
          padding: 10px;
          color: #333; }

.success {
          border-color: green; }

.error {
          border-color: red; }

.warning {
          border-color: yellow; }

.foo:before {
          content: ""; }

.bar:before {
          content: "∑"; }
"
`;

exports[`sassOptions option should work when the option like "Object" ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
          font: 100% Helvetica, sans-serif;
          color: #333; }

nav ul {
          margin: 0;
          padding: 0;
          list-style: none; }

nav li {
          display: inline-block; }

nav a {
          display: block;
          padding: 6px 12px;
          text-decoration: none; }

.box {
          -webkit-border-radius: 10px;
          -moz-border-radius: 10px;
          -ms-border-radius: 10px;
          border-radius: 10px; }

.foo:before {
          content: ""; }

.bar:before {
          content: "∑"; }
"
`;

exports[`sassOptions option should work when the option like "Object" ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work when the option like "Object" ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with custom scheme import ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with custom scheme import ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with custom scheme import ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with custom scheme import ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with custom scheme import ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with custom scheme import ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with custom scheme import ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with custom scheme import ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "fiber" option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "fiber" option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.message, .success, .error, .warning {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333; }

.success {
  border-color: green; }

.error {
  border-color: red; }

.warning {
  border-color: yellow; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should work with the "fiber" option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should work with the "fiber" option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "fiber" option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "fiber" option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "fiber" option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"h2, h3, h4, h5 {
  color: #08c;
}"
`;

exports[`sassOptions option should work with the "functions" option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"h2, h3, h4, h5 {
  color: #08c;
}"
`;

exports[`sassOptions option should work with the "functions" option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"h2, h3, h4, h5 {
  color: #08c; }
"
`;

exports[`sassOptions option should work with the "functions" option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"h2, h3, h4, h5 {
  color: #08c; }
"
`;

exports[`sassOptions option should work with the "functions" option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"h2, h3, h4, h5 {
  color: #08c;
}"
`;

exports[`sassOptions option should work with the "functions" option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"h2, h3, h4, h5 {
  color: #08c;
}"
`;

exports[`sassOptions option should work with the "functions" option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "functions" option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'sass' syntax): css 2`] = `
".a {
  color: red;
}

.b {
  color: blue;
}"
`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'sass' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'scss' syntax): css 2`] = `
".a {
  color: red;
}

.b {
  color: blue;
}"
`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'scss' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'sass' syntax): css 2`] = `
".a {
  color: red; }

.b {
  color: blue; }
"
`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'sass' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'sass' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'scss' syntax): css 2`] = `
".a {
  color: red; }

.b {
  color: blue; }
"
`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'scss' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('node-sass', 'legacy' API, 'scss' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'sass' syntax): css 2`] = `
".a {
  color: red;
}

.b {
  color: blue;
}"
`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'scss' syntax): css 2`] = `
".a {
  color: red;
}

.b {
  color: blue;
}"
`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a array of functions option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'sass' syntax): css 2`] = `
".a {
  color: red;
}"
`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'sass' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'scss' syntax): css 2`] = `
".a {
  color: red;
}"
`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'scss' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'sass' syntax): css 2`] = `
".a {
  color: red; }
"
`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'sass' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'sass' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'scss' syntax): css 2`] = `
".a {
  color: red; }
"
`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'scss' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('node-sass', 'legacy' API, 'scss' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'sass' syntax): css 2`] = `
".a {
  color: red;
}"
`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `""`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'scss' syntax): css 2`] = `
".a {
  color: red;
}"
`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 2`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "importer" as a single function option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 2`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
".include-path-module {
  background: hotpink;
}

._underscore-include-path-module {
  background: hotpink;
}"
`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
".include-path-module {
  background: hotpink;
}

._underscore-include-path-module {
  background: hotpink;
}"
`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'modern' API, 'sass' syntax): css 1`] = `
".include-path-module {
  background: hotpink;
}

._underscore-include-path-module {
  background: hotpink;
}"
`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'modern' API, 'scss' syntax): css 1`] = `
".include-path-module {
  background: hotpink;
}

._underscore-include-path-module {
  background: hotpink;
}"
`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
".include-path-module {
  background: hotpink; }

._underscore-include-path-module {
  background: hotpink; }
"
`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
".include-path-module {
  background: hotpink; }

._underscore-include-path-module {
  background: hotpink; }
"
`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
".include-path-module {
  background: hotpink;
}

._underscore-include-path-module {
  background: hotpink;
}"
`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
".include-path-module {
  background: hotpink;
}

._underscore-include-path-module {
  background: hotpink;
}"
`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'modern' API, 'sass' syntax): css 1`] = `
".include-path-module {
  background: hotpink;
}

._underscore-include-path-module {
  background: hotpink;
}"
`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'modern' API, 'scss' syntax): css 1`] = `
".include-path-module {
  background: hotpink;
}

._underscore-include-path-module {
  background: hotpink;
}"
`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "includePaths"/"loadPaths" option ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
		font: 100% Helvetica, sans-serif;
		color: #333;
}

nav ul {
		margin: 0;
		padding: 0;
		list-style: none;
}
nav li {
		display: inline-block;
}
nav a {
		display: block;
		padding: 6px 12px;
		text-decoration: none;
}

.box {
		-webkit-border-radius: 10px;
		-moz-border-radius: 10px;
		-ms-border-radius: 10px;
		border-radius: 10px;
}

.message, .warning, .error, .success {
		border: 1px solid #ccc;
		padding: 10px;
		color: #333;
}

.success {
		border-color: green;
}

.error {
		border-color: red;
}

.warning {
		border-color: yellow;
}

.foo:before {
		content: "\\e0c6";
}

.bar:before {
		content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentType" option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
		font: 100% Helvetica, sans-serif;
		color: #333;
}

nav ul {
		margin: 0;
		padding: 0;
		list-style: none;
}
nav li {
		display: inline-block;
}
nav a {
		display: block;
		padding: 6px 12px;
		text-decoration: none;
}

.box {
		-webkit-border-radius: 10px;
		-moz-border-radius: 10px;
		-ms-border-radius: 10px;
		border-radius: 10px;
}

.foo:before {
		content: "\\e0c6";
}

.bar:before {
		content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentType" option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
		font: 100% Helvetica, sans-serif;
		color: #333; }

nav ul {
		margin: 0;
		padding: 0;
		list-style: none; }

nav li {
		display: inline-block; }

nav a {
		display: block;
		padding: 6px 12px;
		text-decoration: none; }

.box {
		-webkit-border-radius: 10px;
		-moz-border-radius: 10px;
		-ms-border-radius: 10px;
		border-radius: 10px; }

.message, .success, .error, .warning {
		border: 1px solid #ccc;
		padding: 10px;
		color: #333; }

.success {
		border-color: green; }

.error {
		border-color: red; }

.warning {
		border-color: yellow; }

.foo:before {
		content: ""; }

.bar:before {
		content: "∑"; }
"
`;

exports[`sassOptions option should work with the "indentType" option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
		font: 100% Helvetica, sans-serif;
		color: #333; }

nav ul {
		margin: 0;
		padding: 0;
		list-style: none; }

nav li {
		display: inline-block; }

nav a {
		display: block;
		padding: 6px 12px;
		text-decoration: none; }

.box {
		-webkit-border-radius: 10px;
		-moz-border-radius: 10px;
		-ms-border-radius: 10px;
		border-radius: 10px; }

.foo:before {
		content: ""; }

.bar:before {
		content: "∑"; }
"
`;

exports[`sassOptions option should work with the "indentType" option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentType" option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentType" option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentType" option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
    font: 100% Helvetica, sans-serif;
    color: #333;
}

nav ul {
    margin: 0;
    padding: 0;
    list-style: none;
}
nav li {
    display: inline-block;
}
nav a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
}

.box {
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    -ms-border-radius: 10px;
    border-radius: 10px;
}

.message, .warning, .error, .success {
    border: 1px solid #ccc;
    padding: 10px;
    color: #333;
}

.success {
    border-color: green;
}

.error {
    border-color: red;
}

.warning {
    border-color: yellow;
}

.foo:before {
    content: "\\e0c6";
}

.bar:before {
    content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentWidth" option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
    font: 100% Helvetica, sans-serif;
    color: #333;
}

nav ul {
    margin: 0;
    padding: 0;
    list-style: none;
}
nav li {
    display: inline-block;
}
nav a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
}

.box {
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    -ms-border-radius: 10px;
    border-radius: 10px;
}

.foo:before {
    content: "\\e0c6";
}

.bar:before {
    content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentWidth" option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
    font: 100% Helvetica, sans-serif;
    color: #333; }

nav ul {
    margin: 0;
    padding: 0;
    list-style: none; }

nav li {
    display: inline-block; }

nav a {
    display: block;
    padding: 6px 12px;
    text-decoration: none; }

.box {
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    -ms-border-radius: 10px;
    border-radius: 10px; }

.message, .success, .error, .warning {
    border: 1px solid #ccc;
    padding: 10px;
    color: #333; }

.success {
    border-color: green; }

.error {
    border-color: red; }

.warning {
    border-color: yellow; }

.foo:before {
    content: ""; }

.bar:before {
    content: "∑"; }
"
`;

exports[`sassOptions option should work with the "indentWidth" option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
    font: 100% Helvetica, sans-serif;
    color: #333; }

nav ul {
    margin: 0;
    padding: 0;
    list-style: none; }

nav li {
    display: inline-block; }

nav a {
    display: block;
    padding: 6px 12px;
    text-decoration: none; }

.box {
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    -ms-border-radius: 10px;
    border-radius: 10px; }

.foo:before {
    content: ""; }

.bar:before {
    content: "∑"; }
"
`;

exports[`sassOptions option should work with the "indentWidth" option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentWidth" option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentWidth" option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentWidth" option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('dart-sass', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.message, .success, .error, .warning {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333; }

.success {
  border-color: green; }

.error {
  border-color: red; }

.warning {
  border-color: yellow; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'modern' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'modern' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'modern' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'modern' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'modern' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "indentedSyntax"/"syntax" option ('sass-embedded', 'modern' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('dart-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "linefeed" option ('dart-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('dart-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('dart-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "linefeed" option ('dart-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('dart-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('node-sass', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.message, .success, .error, .warning {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333; }

.success {
  border-color: green; }

.error {
  border-color: red; }

.warning {
  border-color: yellow; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should work with the "linefeed" option ('node-sass', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('node-sass', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('node-sass', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import url(./file.css);
body {
  font: 100% Helvetica, sans-serif;
  color: #333; }

nav ul {
  margin: 0;
  padding: 0;
  list-style: none; }

nav li {
  display: inline-block; }

nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none; }

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px; }

.foo:before {
  content: ""; }

.bar:before {
  content: "∑"; }
"
`;

exports[`sassOptions option should work with the "linefeed" option ('node-sass', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('node-sass', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('sass-embedded', 'legacy' API, 'sass' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.message, .warning, .error, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}

.error {
  border-color: red;
}

.warning {
  border-color: yellow;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "linefeed" option ('sass-embedded', 'legacy' API, 'sass' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('sass-embedded', 'legacy' API, 'sass' syntax): warnings 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('sass-embedded', 'legacy' API, 'scss' syntax): css 1`] = `
"@charset "UTF-8";
@import "./file.css";
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}

nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}

.box {
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px;
  -ms-border-radius: 10px;
  border-radius: 10px;
}

.foo:before {
  content: "\\e0c6";
}

.bar:before {
  content: "∑";
}"
`;

exports[`sassOptions option should work with the "linefeed" option ('sass-embedded', 'legacy' API, 'scss' syntax): errors 1`] = `[]`;

exports[`sassOptions option should work with the "linefeed" option ('sass-embedded', 'legacy' API, 'scss' syntax): warnings 1`] = `[]`;
